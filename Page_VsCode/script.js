// Contenu des tutoriels pour chaque commande
const tutorials = {
    init: {
        title: "Initialiser un d√©p√¥t Git (Init)",
        image: "images/git-init.png",
        explanation: `
            <h3>Comment initialiser un d√©p√¥t Git dans VS Code :</h3>
            <ol>
                <li>Ouvrez votre dossier de projet dans VS Code.</li>
                <li>Cliquez sur l'ic√¥ne "Contr√¥le de code source" dans la barre lat√©rale gauche (ic√¥ne avec des branches).</li>
                <li>Vous verrez un bouton "Initialiser le d√©p√¥t" - cliquez dessus.</li>
                <li>VS Code initialisera automatiquement un nouveau d√©p√¥t Git dans votre dossier.</li>
                <li>Un fichier .gitignore sera cr√©√© automatiquement selon votre type de projet.</li>
            </ol>
            <p><strong style="color: var(--primary-color);">üõë Note :</strong> Une fois initialis√©, vous verrez appara√Ætre un badge avec le nombre de changements sur l'ic√¥ne du contr√¥le de code source.</p>
        `
    },
    add: {
        title: "Ajouter des fichiers (Stage)",
        image: "images/git-init.png",
        explanation: `
            <h3>Comment ajouter des fichiers au suivi Git dans VS Code :</h3>
            <ol>
                <li>Dans l'onglet "Contr√¥le de code source", vous verrez la liste des fichiers modifi√©s.</li>
                <li>Pour ajouter un fichier individuel :
                    <ul>
                        <li>Survolez le fichier et cliquez sur le '+' √† c√¥t√© du nom</li>
                        <li>Ou faites un clic droit et choisissez "Stage Changes"</li>
                    </ul>
                </li>
                <li>Pour ajouter tous les fichiers :
                    <ul>
                        <li>Cliquez sur le '+' en haut de la liste des changements</li>
                        <li>Ou utilisez le menu contextuel "Stage All Changes"</li>
                    </ul>
                </li>
                <li>Les fichiers stag√©s appara√Ætront dans la section "Staged Changes".</li>
            </ol>
            <p><strong>Astuce :</strong> Vous pouvez aussi d√©s√©lectionner des fichiers en cliquant sur le '-' √† c√¥t√© du fichier stag√©.</p>
        `
    },
    commit: {
        title: "Cr√©er un commit",
        image: "images/git-commit.png",
        explanation: `
            <h3>Comment cr√©er un commit dans VS Code :</h3>
            <ol>
                <li>Une fois vos fichiers stag√©s, regardez en haut de l'onglet "Contr√¥le de code source".</li>
                <li>Vous verrez une zone de texte avec le message "Message (press Ctrl+Enter to commit)".</li>
                <li>Saisissez votre message de commit en respectant les conventions :
                    <ul>
                        <li>Premi√®re ligne : r√©sum√© court (50 caract√®res max)</li>
                        <li>Ligne vide</li>
                        <li>Description d√©taill√©e si n√©cessaire</li>
                    </ul>
                </li>
                <li>Pour valider le commit :
                    <ul>
                        <li>Cliquez sur la coche ‚úì au-dessus du message</li>
                        <li>Ou utilisez Ctrl+Enter (Cmd+Enter sur Mac)</li>
                    </ul>
                </li>
            </ol>
            <p><strong>Conseil :</strong> Faites des commits atomiques qui concernent une seule fonctionnalit√© ou correction.</p>
        `
    },
    branch: {
        title: "G√©rer les branches",
        image: "images/git-branch.png",
        explanation: `
            <h3>Comment g√©rer les branches dans VS Code :</h3>
            <ol>
                <li>En bas √† gauche de VS Code, vous verrez le nom de votre branche actuelle.</li>
                <li>Pour cr√©er une nouvelle branche :
                    <ul>
                        <li>Cliquez sur le nom de la branche en bas</li>
                        <li>Choisissez "Create new branch..."</li>
                        <li>Entrez le nom de la nouvelle branche</li>
                    </ul>
                </li>
                <li>Pour changer de branche :
                    <ul>
                        <li>Cliquez sur le nom de la branche en bas</li>
                        <li>S√©lectionnez la branche d√©sir√©e dans la liste</li>
                    </ul>
                </li>
                <li>Pour voir l'historique des branches :
                    <ul>
                        <li>Ouvrez la palette de commandes (Ctrl+Shift+P)</li>
                        <li>Tapez "Git: View Branch History"</li>
                    </ul>
                </li>
            </ol>
            <p><strong>Astuce :</strong> Utilisez des noms de branches descriptifs comme "feature/login" ou "fix/bug-123".</p>
        `
    },
    merge: {
        title: "Fusionner les branches (Merge)",
        image: "images/git-merge.png",
        explanation: `
            <h3>Comment fusionner des branches dans VS Code :</h3>
            <ol>
                <li>Assurez-vous d'√™tre sur la branche de destination (g√©n√©ralement main).</li>
                <li>Pour fusionner une branche :
                    <ul>
                        <li>Ouvrez la palette de commandes (Ctrl+Shift+P)</li>
                        <li>Tapez "Git: Merge Branch..."</li>
                        <li>S√©lectionnez la branche √† fusionner</li>
                    </ul>
                </li>
                <li>En cas de conflits :
                    <ul>
                        <li>VS Code affichera les fichiers en conflit</li>
                        <li>Cliquez sur un fichier pour voir les diff√©rences</li>
                        <li>Choisissez "Accept Current", "Accept Incoming", ou modifiez manuellement</li>
                    </ul>
                </li>
            </ol>
            <p><strong>Important :</strong> Faites toujours un commit ou un stash de vos changements avant de fusionner.</p>
        `
    },
    push: {
        title: "Envoyer les modifications (Push)",
        image: "images/git-push.png",
        explanation: `
            <h3>Comment pousser vos modifications vers GitHub dans VS Code :</h3>
            <ol>
                <li>V√©rifiez que tous vos changements sont commit√©s.</li>
                <li>Pour pousser les modifications :
                    <ul>
                        <li>Cliquez sur l'ic√¥ne de synchronisation en bas √† gauche</li>
                        <li>Ou utilisez les boutons "Push" dans l'onglet "Contr√¥le de code source"</li>
                    </ul>
                </li>
                <li>Si c'est votre premier push :
                    <ul>
                        <li>VS Code vous demandera de vous connecter √† GitHub</li>
                        <li>Suivez les instructions pour l'authentification</li>
                    </ul>
                </li>
            </ol>
            <p><strong>Note :</strong> L'ic√¥ne de synchronisation affiche aussi le nombre de commits √† pousser/tirer.</p>
        `
    },
    pull: {
        title: "R√©cup√©rer les modifications (Pull)",
        image: "images/git-pull.png",
        explanation: `
            <h3>Comment r√©cup√©rer les modifications depuis GitHub dans VS Code :</h3>
            <ol>
                <li>Pour r√©cup√©rer les derni√®res modifications :
                    <ul>
                        <li>Cliquez sur l'ic√¥ne de synchronisation en bas</li>
                        <li>Ou utilisez le bouton "Pull" dans l'onglet "Contr√¥le de code source"</li>
                    </ul>
                </li>
                <li>VS Code r√©cup√©rera automatiquement les changements.</li>
                <li>En cas de conflits :
                    <ul>
                        <li>VS Code les affichera dans l'√©diteur</li>
                        <li>R√©solvez-les comme lors d'un merge</li>
                    </ul>
                </li>
                <li>Pour voir ce qui va √™tre r√©cup√©r√© :
                    <ul>
                        <li>Utilisez "Git: Pull..." dans la palette de commandes</li>
                        <li>Choisissez "Preview" pour voir les changements</li>
                    </ul>
                </li>
            </ol>
            <p><strong>Conseil :</strong> Faites r√©guli√®rement des pulls pour rester √† jour avec votre √©quipe.</p>
        `
    }
};

const modal = document.getElementById('tutorialModal');
const modalTitle = document.getElementById('modalTitle');
const modalImage = document.getElementById('commandScreenshot');
const modalExplanation = document.getElementById('commandExplanation');
const closeButton = document.querySelector('.close-button');

// Gestionnaires d'√©v√©nements pour les cartes de commandes
document.querySelectorAll('.command-card').forEach(card => {
    const command = card.dataset.command;
    card.querySelector('.learn-more').addEventListener('click', () => {
        showTutorial(command);
    });
});

// Fermeture de la modal
closeButton.addEventListener('click', () => {
    modal.style.display = 'none';
});

window.addEventListener('click', (e) => {
    if (e.target === modal) {
        modal.style.display = 'none';
    }
});

// Affichage du tutoriel
function showTutorial(command) {
    const tutorial = tutorials[command];
    if (tutorial) {
        modalTitle.textContent = tutorial.title;
        modalImage.style.display = 'block'; // R√©affiche l'image √† chaque ouverture
        // Supprime le message d'erreur pr√©c√©dent s'il existe
        const prevError = modalImage.parentNode.querySelector('.image-error');
        if (prevError) prevError.remove();
        modalImage.src = tutorial.image;
        modalImage.alt = `Capture d'√©cran ${tutorial.title}`;
        modalExplanation.innerHTML = tutorial.explanation;
        modal.style.display = 'block';
    }
}

// Gestion des images manquantes
modalImage.addEventListener('error', () => {
    modalImage.style.display = 'none';
    const errorMessage = document.createElement('p');
    errorMessage.classList.add('image-error');
    errorMessage.textContent = "Image en cours de chargement...";
    modalImage.parentNode.insertBefore(errorMessage, modalImage);
});
